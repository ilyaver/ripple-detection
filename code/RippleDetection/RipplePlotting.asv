
clc
clear 
close all

addpath(genpath('./'))

addpath(genpath('/space/seh8/1/halgdev/projects/cdickey/packages'))
addpath(genpath('/space/seh8/1/halgdev/projects/cdickey/ripple/CortRipple'))

addpath(genpath('/home/jgarret/mat'))
addpath(genpath('/home/jgarret/ArtifactDetection'))

addpath(genpath('/space/seh8/1/halgdev/projects/cdickey/eeglab14_1_2b/'))
rmpath(genpath('/space/seh8/1/halgdev/projects/cdickey/eeglab14_1_2b/functions/octavefunc'))

%% Paths / Inputs


subj_list_full = {'S1','S2','S3','S4','S5','S6','S7','S8','S9','S10',...
                  'S11','S12','S13','S14','S15', 'S16','S17'};



sleepfiles_set = {[2,3,7],[2,5,9,10],[3,5,6,7],[1],...
        [2,3,5],[4,10,12],[5,6,7,9,11],[2,3,6,8],[1,2,4,5,7],...
        [3,7,8],[3,7,8,11],[1,2,5],[2,4,5,6,7,8,10,11],[3,8,9,12],...
        [2,6,8],[2,6,7],[1,2,3,5,7,10],[1,3,4,5],[1,3,4]};

% sleepfiles_set = {1,1,1,1,1,1,1,1,1,1,1,1};
subjID =[2]; % [4,2,16];
winSec = 2.000;
rippleWindowSec = 0.100;


recordingState = 'sleep'; %sleep or waking
tag = recordingState;
locations = {'NC','HC'}; %{'NC','HC'}; %NC, HC, TH or AMY
modifier = 'newMethod';

exportFolder = '/space/seh9/2/halgdev/projects/iverzh/ripples/';
if ~isfolder(exportFolder); mkdir(exportFolder); end              
              
rippleStatsFolder = '/space/seh9/2/halgdev/projects/iverzh/ripples/matFiles';              

preProcExportFolder = '/space/seh9/2/halgdev/projects/iverzh/ripples/preProc/';


%% Load rippleStats and compute bandpasses
for isbj = 1 %1:length(subjID)
    subj = subjID(isbj);
    subject = subj_list_full{subj};

    for l = 1:length(locations)
        location = locations{l};
        if strcmp(location, 'NC')
            load(fullfile(rippleStatsFolder,[subject,'_ripple_stats_',recordingState,'_',location,'_',modifier,'.mat']));
        else
%             load(fullfile(rippleStatsFolder,[subject,'_ripple_stats_',recordingState,'_',location,'.mat']));
            load(fullfile(rippleStatsFolder,[subject,'_ripple_stats_',recordingState,'_',location,'_',modifier,'.mat']));

        end

        data = [];
        switch recordingState
            case 'sleep'
                sleepfiles = sleepfiles_set{subj};


                for si = 1:length(sleepfiles)
                    s = sleepfiles(si);
                    if contains(subject,'CC')
                        if strcmp(location,'NC')
                                            
                            load(fullfile(preProcExportFolder,[subject,'_',num2str(s),'sleep','_polCheck.mat']), 'polCheck')

                            LFPdir = sprintf('/space/seh8/1/halgdev/projects/cdickey/ripple/CortRipple/NC_ripple/%s/segment_indices/',subject);
                            temp = load(fullfile(LFPdir,sprintf('sleep_%i_N23_seg_NC.mat', s)),'sleepdata','chan_labels');
                        elseif strcmp(location,'HC')
                            load(fullfile(preProcExportFolder,[subject,'_',num2str(s),'sleep_',location,'_polCheck.mat']), 'polCheck')

                            LFPdir = sprintf('/space/seh8/1/halgdev/projects/cdickey/ripple/CortRipple/NC_ripple/%s/noWaveletReject/HC',subject);
                            temp = load(fullfile(LFPdir,sprintf('sleep_sleep%i_N23.mat', s)),'sleepdata','chan_labels');
                        end
                    else
                        load(fullfile(preProcExportFolder,[subject,'_',num2str(s),'_sleep_',location,'__polCheck.mat']), 'polCheck')

%                         LFPdir = sprintf('/space/seh9/5/halgdev/projects/iverzh/ripple/NC_ripple/%s/%s/%s',subject,recordingState,location);
%                         temp = load(fullfile(LFPdir,sprintf('sleep_%i.mat', s)),'data','chan_labels');

                        LFPdir = sprintf('/space/seh8/1/halgdev/projects/skajfez/UTAH_data/sleepStaging/Both/');

                        temp = load(fullfile(LFPdir,'Both_data_NREM.mat'),'datNREM','chan_labels','rejMsk');                                     

                        if ~exist('temp.sleepdata','var')
                            temp.sleepdata = temp.datNREM';
                            temp.data = [];
                        end
                    end


                    if isempty(data)
                        data = temp.sleepdata .* polCheck;
                    else
                        data = [data, temp.sleepdata .* polCheck];
                    end
                end

            case 'waking'
                if contains(subject,'CC')
                    LFPdir = sprintf('/space/seh8/1/halgdev/projects/cdickey/ripple/CortRipple/NC_ripple/%s/waking/',subject);           

                    if strcmp(location,'NC')
                        load(fullfile(LFPdir,'NC','waking_1.mat'),'data');
                    elseif strcmp(location,'HC')
                        load(fullfile(LFPdir,'HC','waking_1.mat'),'data');
                   

                    end
                else
                    LFPdir = sprintf('/space/seh8/1/halgdev/projects/skajfez/UTAH_data/sleepStaging/Both/');
%                     LFPdir = sprintf('/space/seh9/5/halgdev/projects/iverzh/ripple/NC_ripple/%s/%s/%s',subject,recordingState,location);
%                     LFPdir = sprintf('/space/seh8/1/halgdev/projects/cdickey/ripple/CortRipple/NC_ripple/%s/microgrid/',subject);

                    temp = load(fullfile(LFPdir,'Both_data_Wake.mat'),'datWake','chan_labels','rejMsk');                                     
%                     temp = load(fullfile(LFPdir,'waking_1.mat'),'data','chan_labels');                                     
% l;l;                    temp = load(fullfile(LFPdir,'CV2','wake_1.mat'),'data');

                    if ~exist('temp.sleepdata','var')
                        temp.sleepdata = temp.datWake';
%                         temp.sleepdata = temp.data;
                        temp.data = [];
                    end
                end

                data = temp.sleepdata;

        end
    %     
    %     if contains(subject,'CC') && strcmp(location, 'NC')
    %         load(sprintf('/space/seh8/1/halgdev/projects/cdickey/ripple/CortRipple/NC_ripple/%s/segment_indices/sleep_%01d_N23_seg_NC_polchecked_newRipp.mat', subject,  sleep_ID))
    %         load(sprintf('/space/seh8/1/halgdev/projects/cdickey/ripple/CortRipple/NC_ripple/%s/noWaveletReject/segment_indices/sleep_%01d_N23_polchecked_newRipp.mat', subject,  sleep_ID))
    %     else
    %         load(sprintf('/space/seh8/1/halgdev/projects/cdickey/ripple/CortRipple/NC_ripple/%s/%s/%s/%s_%s',subject,recordingState,location,recordingState, '1_polchecked_newRipp.mat'))
    %         load(sprintf('/space/seh8/1/halgdev/projects/cdickey/ripple/CortRipple/NC_ripple/%s/%s/%s/%s_%s',subject,recordingState,location,recordingState, '1.mat'));
    %     end

        try 
            load(sprintf('/space/seh8/1/halgdev/projects/cdickey/ripple/CortRipple/NC_ripple/%s/%s/nan_edge_mask.mat', subject, recordingState),'nan_edge_mask') 
        catch 
            warning('could not load epoch edge mask');
            nan_edge_mask = false(1,size(data,2));
        end

        if strcmp(subject,'T11')
            nan_edge_mask = temp.rejMsk;
        end

        if isfield(rippleStats,'ephys_ch')
            data = data(rippleStats.ephys_ch,:);
        end

    %     polCheck = checkPolarity(data,rippleStats.fs); %check polarity by comparing slow oscillations w HG
    %     data = polCheck .* data;

        win = winSec * rippleStats.fs;
        rippleWindow = rippleWindowSec * rippleStats.fs;

        chan_labels = rippleStats.chanLabels;
        rippleband = rippleStats.RB;
        for ch = 9:size(data,1)

            [rippleSleepSet,~] = AnalyzeRipple(data, rippleband, win, rippleWindow, 0, 0, nan_edge_mask, 0, ...
                                                           ch, rippleStats.locs{ch}, [], rippleStats.fs, chan_labels, 0,0);

            LFPbandpasses = [];                                           
            fn = fieldnames(rippleSleepSet);
            %      rippleAllSleepSet = rippleSleepSet;
            for f = 1:numel(fn)
                LFPbandpasses(1).(fn{f}){ch} = [];
            end


            fn = fieldnames(rippleSleepSet);
            if numel(rippleSleepSet.rippleAmp) > 5
                for f = 1:numel(fn)
                    fDat = rippleSleepSet.(fn{f});
                    DIM = size(fDat,1);
                    if DIM > 1 || size(fDat,2) == 4001
                        LFPbandpasses.(fn{f}){ch} = [LFPbandpasses.(fn{f}){ch}; fDat];
                    elseif DIM == 1
                        LFPbandpasses.(fn{f}){ch} = [LFPbandpasses.(fn{f}){ch}, fDat];
                    end

                end
            end

            LFPbandpasses.recordingLength = size(data,2);

            %% Plotting
            fprintf(sprintf('exporting plots for channel %s\n', chan_labels{ch}))

            summaryFolder = fullfile(exportFolder, subject, ['ChannelSummary_', tag, '_',modifier]);
            singleTrialFolder = fullfile(exportFolder, subject, ['SingleTrials_',tag,'_', modifier], chan_labels{ch});
            TFexportFolder = fullfile(exportFolder, subject, ['TF_', tag,'_',modifier]);


            if ~isfolder(fullfile(summaryFolder,'PNG')); mkdir(fullfile(summaryFolder, 'PNG')); end
            if ~isfolder(fullfile(summaryFolder,'PDF')); mkdir(fullfile(summaryFolder, 'PDF')); end
            if ~isfolder(fullfile(summaryFolder,'Fig')); mkdir(fullfile(summaryFolder, 'Fig')); end

            if ~isfolder(fullfile(singleTrialFolder,'PNG')); mkdir(fullfile(singleTrialFolder, 'PNG')); end
            if ~isfolder(fullfile(singleTrialFolder,'PDF')); mkdir(fullfile(singleTrialFolder, 'PDF')); end
            if ~isfolder(fullfile(singleTrialFolder,'Fig')); mkdir(fullfile(singleTrialFolder, 'Fig')); end

            if ~isfolder(fullfile(TFexportFolder,'PNG')); mkdir(fullfile(TFexportFolder, 'PNG')); end
            if ~isfolder(fullfile(TFexportFolder,'PDF')); mkdir(fullfile(TFexportFolder, 'PDF')); end
            if ~isfolder(fullfile(TFexportFolder,'Fig')); mkdir(fullfile(TFexportFolder, 'Fig')); end




            if numel(LFPbandpasses.rippleAmp{ch}) >= 20
               meanLFP = mean(LFPbandpasses.raw{ch});

                for rip_num = 1:size(LFPbandpasses.raw{ch},1)
                   rippleCOV = cov(LFPbandpasses.raw{ch}(rip_num,:), meanLFP);
                   LFPbandpasses.cov{ch}(rip_num) = rippleCOV(1,2);     
                end

        %             h = chanMean_SingleTrials(LFPbandpasses, ch, win, fs, subject, chan_labels);
        %             saveas(h, sprintf('%s/%s_%s_summarySingleTrials.png', summaryFolder, subject, chan_labels{ch}))

                hsummary = chanOverviewPlot(LFPbandpasses, rippleStats, ch, win, rippleStats.fs, subject, chan_labels);
                savepdf(hsummary, sprintf('%s/PDF/%s_%s_summary.pdf', summaryFolder, subject, chan_labels{ch}))
                saveas(hsummary,  sprintf('%s/PNG/%s_%s_summary.png', summaryFolder, subject, chan_labels{ch}))
                saveas(hsummary,  sprintf('%s/Fig/%s_%s_summary.fig', summaryFolder, subject, chan_labels{ch}))

        %                     
                hTF = chanTFplot(LFPbandpasses, ch, win, rippleStats.fs, subject, chan_labels,'TF');
                savepdf(hTF, sprintf('%s/PDF/%s_%s_TimeFreq.pdf', TFexportFolder, subject, chan_labels{ch}))
                saveas(hTF,  sprintf('%s/PNG/%s_%s_TimeFreq.png', TFexportFolder, subject, chan_labels{ch}))
                saveas(hTF,  sprintf('%s/Fig/%s_%s_TimeFreq.fig', TFexportFolder, subject, chan_labels{ch}))
        % % % 
                hTF = chanTFplot(LFPbandpasses, ch, win, rippleStats.fs, subject, chan_labels,'LFP');
                savepdf(hTF, sprintf('%s/PDF/%s_%s_MeanLFP.pdf', TFexportFolder, subject, chan_labels{ch}))
                saveas(hTF,  sprintf('%s/PNG/%s_%s_MeanLFP.png', TFexportFolder, subject, chan_labels{ch}))
                saveas(hTF,  sprintf('%s/Fig/%s_%s_MeanLFP.fig', TFexportFolder, subject, chan_labels{ch}))

              %  Plot by rippleBand amp 
                [~,I] = sort(LFPbandpasses.rippleAmp{ch}, 'descend');
                for f = 1:5
                    h3 = figure('Position', [3 30 1908 885], 'Visible', 'off');
                    for i = 1:4

                        rip_num = I(4*(f-1) + i);
                        rippleFullPlot(LFPbandpasses, i, ch, rip_num, rippleStats.fs, rippleband)

                    end
                    orient(h3,'landscape')
                    savepdf(h3, sprintf('%s/PDF/%s_%s_exampleRipple_%i.pdf', singleTrialFolder, subject, chan_labels{ch}, f))
                    saveas(h3,  sprintf('%s/PNG/%s_%s_exampleRipple_%i.png', singleTrialFolder, subject, chan_labels{ch}, f))
                    saveas(h3,  sprintf('%s/Fig/%s_%s_exampleRipple_%i.fig', singleTrialFolder, subject, chan_labels{ch}, f))
                    close
                end


        %             % Plot sorted by 100200 zscore
        %             center = round((win*2+1)/2); % ripple center
        %             [A,I] = sort(rippleStats.InterRipPeriod{ch}, 'ascend');
        %             allI = find(rippleStats.centeredInd{ch});
        %             I = allI(I);
        %             for f = 1:5 
        %                 h3 = figure('Position', [3 30 1908 885], 'Visible', 'off');
        %                 for i = 1:4
        % 
        %                     rip_num = I(4*(f-1) + i);
        %                     rippleFullPlot(LFPbandpasses, i, ch, rip_num, fs, rippleband)
        % 
        %                 end
        %                 orient(h3,'landscape')
        %                 saveas(h3, sprintf('%s/%s_sleep%01d_%s_exampleRipples_bursting_%i.png', singleTrialFolder, subject, sleep_ID, chan_labels{ch}, f))
        %                 close
        %             end

                close all
            end
        end
    end
end